// Example solution for Shape inheritance
#include <assert.h>
#include <cmath>

// TODO: Define pi
#define PI 3.14159

// TODO: Define the abstract class Shape
class Shape{    //Remember, not Shape().
// TODO: Define public virtual functions Area() and Perimeter()
public:
    //Shape(){} why don't we need a constructor? 
    // TODO: Append the declarations with = 0 to specify pure virtual functions
    virtual double Area() const = 0;
    virtual double Perimeter() const = 0;
    
};
  
// TODO: Define Rectangle to inherit publicly from Shape
class Rectangle : public Shape {
    // TODO: Declare public constructor
public:
    Rectangle(double width, double height) : width_(width), height_(height) {}
    // TODO: Override virtual base class functions Area() and Perimeter()
    double Area() const override {  //Remember, this structure, const override.
        double a; 
        a = width_ * height_;    //Remember, inside the class, you have to use the private variable not width * height
        return a;
        
    }
    double Perimeter() const override {    //Remember, to declare the function type. 
        double p;
        p = 2 * (width_ + height_);
        return p;
    }

private:
    // TODO: Declare private attributes width and height
    float width_;    //why do we need double type?
    float height_;  
};
  
// TODO: Define Circle to inherit from Shape  
class Circle : public Shape {
    // TODO: Declare public constructor
public:
    Circle(double radius) : radius_(radius){}
    // TODO: Override virtual base class functions Area() and Perimeter()
    double Area() const override {
        double a;
        a = PI * pow(radius_, 2);
        return a;
    }
    double Perimeter() const override {
        double p;
        p = 2 * PI * radius_;
        return p;
    }
private:
    float radius_;
    
};


  
  // TODO: Override virtual base class functions Area() and Perimeter()
  // TODO: Declare private member variable radius

// Test in main()
int main() {
  double epsilon = 0.1; // useful for floating point equality

  // Test circle
  Circle circle(12.31);
  assert(abs(circle.Perimeter() - 77.35) < epsilon);
  assert(abs(circle.Area() - 476.06) < epsilon);

  // Test rectangle
  Rectangle rectangle(10, 6);
  assert(rectangle.Perimeter() == 32);
  assert(rectangle.Area() == 60);
}
